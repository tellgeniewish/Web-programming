/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.81
 * Generated at: 2023-11-29 15:09:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Practice_002024;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Calendar;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


public String parseDay(int cnt, String day) {
   String color;
   if (cnt == 1)
          color = "red";
    else if (cnt == 7)
          color = "blue";
    else
       color = "black";
   
   //return "<td><font color='" + color + "'>" + day + "</font></td>";
   return "<td>" + day + "</td>";
     
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--응용화학과 20211689 김현진\r\n");
      out.write("이 과제는 크롬에 최적화되어 있습니다.-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>calendar.jsp</title>\r\n");
      out.write("<style>\r\n");
      out.write("   h3 {\r\n");
      out.write("      text-align: left;/**/\r\n");
      out.write("   }\r\n");
      out.write("   table {\r\n");
      out.write("         margin: auto;\r\n");
      out.write("         text-align: left;\r\n");
      out.write("         border-collapse: collapse;\r\n");
      out.write("         width: 600px;\r\n");
      out.write("         height: 250px;/**/\r\n");
      out.write("         \r\n");
      out.write("      }\r\n");
      out.write("   .bold {\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("      }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

Calendar today = Calendar.getInstance();
Calendar cal = Calendar.getInstance();

int year = cal.get(Calendar.YEAR); // 년
int month = cal.get(Calendar.MONTH) + 1; // 월
//int date = cal.get(Calendar.DATE); // 일

String y = request.getParameter("YEAR");
String m = request.getParameter("MONTH");
if (y != null && y != "" && m != null && m != "" ) {
	year = Integer.parseInt(y);
	month = Integer.parseInt(m);
	cal.set(year, month - 1, 1);
}
//out.println("오늘은 " + year + "년 " + month + "월 " + date + "일 ");
out.println("<table><h3>" + year + "년 " + month + "월</h3><hr>");
int start = cal.getMinimum(Calendar.DATE); // 현재 기준 월(月)의 시작하는 날 구하기
int end = cal.getActualMaximum(Calendar.DAY_OF_MONTH); // 현재 기준 월(月)의 마지막 날 구하기
int startDay = cal.get(Calendar.DAY_OF_WEEK);
//out.println("이번 달은 " + start + "부터 시작하여 " + end + "에 끝납니다.<br><br>");

/*
out.println("<tr>");
    String[] WeekDay = { "일", "월", "화", "수", "목", "금", "토" };
    for (int i = 0; i < 7; i++) {
       String day = WeekDay[i];
       String color;
       if (i == 0)
          color = "red";
       else if (i == 6)
          color = "blue";
       else
          color = "black";
       out.println("<td class='bold'><font color='" + color + "'>" + day + "</font></td>");
    }
 out.println("</tr>");
*/
int i = 1;
int spCount = 0;
for (int row = 0; row < 5; row++) {
    out.println("<tr>");
    for (int col = 1; col <= 7; col++) {
       if (row == 0 && col < startDay) {
          out.println("<td> &nbsp; </td>");
       }
       else {
          if (end < i) {
             int stop = 35 - spCount;
             for (int j = 0; j < stop; j++)
                out.println("<td> &nbsp; </td>");
             break;
          }
          String pd = i + "";
          String color = parseDay(col, pd);
          out.println(color);
          i++;
       }
       spCount++;
       if (spCount % 7 == 0)
         out.println("<br>");
    }
    out.println("</tr>");
}
out.println("</table>");

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
